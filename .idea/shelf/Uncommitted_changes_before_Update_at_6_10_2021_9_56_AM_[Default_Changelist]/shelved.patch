Index: menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ditto.menuitems_ui.settings\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport com.ditto.menuitems_ui.databinding.WorkspaceSettingsFragmentBinding\r\nimport core.ui.BaseFragment\r\nimport core.ui.BottomNavigationActivity\r\nimport core.ui.ViewModelDelegate\r\nimport core.ui.common.Utility\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport io.reactivex.rxkotlin.plusAssign\r\nimport kotlinx.android.synthetic.main.workspace_settings_fragment.*\r\n\r\nclass WSProSettingsFragment : BaseFragment() {\r\n\r\n    private val viewModel: WSProSettingViewModel by ViewModelDelegate()\r\n    lateinit var binding: WorkspaceSettingsFragmentBinding\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = WorkspaceSettingsFragmentBinding.inflate(\r\n            inflater\r\n        ).also {\r\n            it.viewmodel = viewModel\r\n            it.lifecycleOwner = viewLifecycleOwner\r\n        }\r\n        return binding.root\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        setuptoolbar()\r\n        viewModel.fetchUserData()\r\n        handleSwitchListener()\r\n//        if (savedInstanceState == null) {\r\n//            viewModel.disposable += viewModel.events\r\n//                .observeOn(AndroidSchedulers.mainThread())\r\n//                .subscribe {\r\n//                    handleEvent(it)   //Observing UI event\r\n//                }\r\n//\r\n//        }\r\n    }\r\n\r\n    fun handleSwitchListener(){\r\n        switch_mirroringreminder.setOnCheckedChangeListener { buttonView, isChecked ->\r\n                viewModel.setMirrorReminderData(isChecked)\r\n            viewModel.postBooleanDataForSettings()\r\n        }\r\n        switch_splicing.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            viewModel.setSplicingNotification(isChecked)\r\n            viewModel.postBooleanDataForSettings()\r\n        }\r\n        switch_multiple_piece.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            viewModel.setSplicingWithMultiple(isChecked)\r\n            viewModel.postBooleanDataForSettings()\r\n        }\r\n        switch_cutnumber.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            viewModel.setCutNumberSplicing(isChecked)\r\n            viewModel.postBooleanDataForSettings()\r\n        }\r\n\r\n    }\r\n\r\n    private fun setuptoolbar(){\r\n        bottomNavViewModel.visibility.set(false)\r\n        toolbarViewModel.isShowTransparentActionBar.set(false)\r\n        toolbarViewModel.isShowActionBar.set(true)\r\n        toolbarViewModel.isShowActionMenu.set(false)\r\n        (activity as BottomNavigationActivity).hidemenu()\r\n        (activity as BottomNavigationActivity).setToolbarTitle(\"Workspace settings\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingsFragment.kt	(revision 4f07f1c69ae29760b345338239df0f7ce34704ab)
+++ menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingsFragment.kt	(date 1623244061761)
@@ -5,6 +5,8 @@
 import android.view.View
 import android.view.ViewGroup
 import android.widget.Toast
+import com.ditto.logger.Logger
+import com.ditto.logger.LoggerFactory
 import com.ditto.menuitems_ui.databinding.WorkspaceSettingsFragmentBinding
 import core.ui.BaseFragment
 import core.ui.BottomNavigationActivity
@@ -13,9 +15,17 @@
 import io.reactivex.android.schedulers.AndroidSchedulers
 import io.reactivex.rxkotlin.plusAssign
 import kotlinx.android.synthetic.main.workspace_settings_fragment.*
+import javax.inject.Inject
 
 class WSProSettingsFragment : BaseFragment() {
 
+    @Inject
+    lateinit var loggerFactory: LoggerFactory
+
+    val logger: Logger by lazy {
+        loggerFactory.create(WSProSettingsFragment::class.java.simpleName)
+    }
+
     private val viewModel: WSProSettingViewModel by ViewModelDelegate()
     lateinit var binding: WorkspaceSettingsFragmentBinding
 
Index: menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ditto.menuitems_ui.settings\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.databinding.ObservableBoolean\r\nimport androidx.databinding.ObservableField\r\nimport com.ditto.logger.Logger\r\nimport com.ditto.logger.LoggerFactory\r\nimport com.ditto.login.domain.LoginUser\r\nimport com.ditto.menuitems.domain.GetWorkspaceProData\r\nimport com.ditto.menuitems_ui.settings.data.LoginResult\r\nimport com.ditto.menuitems_ui.settings.model.WSSettingsInputData\r\nimport core.event.UiEvents\r\nimport core.ui.BaseViewModel\r\nimport core.ui.common.Utility\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport io.reactivex.rxkotlin.plusAssign\r\nimport io.reactivex.rxkotlin.subscribeBy\r\nimport io.reactivex.schedulers.Schedulers\r\nimport non_core.lib.Result\r\nimport non_core.lib.error.Error\r\nimport non_core.lib.error.NoNetworkError\r\nimport javax.inject.Inject\r\n\r\n\r\nclass WSProSettingViewModel @Inject constructor(private val utility: Utility,\r\n                                                private val context: Context,\r\n                                                val useCase:UseCases,\r\n                                                private val getWorkspaceProData: GetWorkspaceProData,\r\n                                                val loggerFactory: LoggerFactory\r\n) : BaseViewModel() {\r\n    // TODO: Implement the ViewModel\r\n    private val dbLoadError: ObservableBoolean = ObservableBoolean(false)\r\n    private var errorString: ObservableField<String> = ObservableField(\"\")\r\n\r\n    private val isMirroringReminderChecked: ObservableBoolean = ObservableBoolean(false)\r\n    private val isCutNumberChecked: ObservableBoolean = ObservableBoolean(false)\r\n    private val isSplicingNotificationChecked: ObservableBoolean = ObservableBoolean(false)\r\n    private val isSplicingWithMultiplePieceChecked: ObservableBoolean = ObservableBoolean(false)\r\n    private val isClickToZoomNotification: ObservableBoolean = ObservableBoolean(false)\r\n\r\n    private val uiEvents = UiEvents<Event>()\r\n    val events = uiEvents.stream()\r\n\r\n\r\n    init {\r\n        if (Utility.isTokenExpired()) {\r\n            utility.refreshToken()\r\n        }\r\n    }\r\n\r\n    val logger: Logger by lazy {\r\n        loggerFactory.create(WSProSettingViewModel::class.java.simpleName)\r\n    }\r\n\r\n    fun fetchUserData() {\r\n        disposable += getWorkspaceProData.getUserDetails()\r\n            .subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribeBy { handleFetchResult(it) }\r\n    }\r\n\r\n    private fun handleFetchResult(result: Result<LoginUser>?) {\r\n        when (result) {\r\n            is Result.OnSuccess<LoginUser> -> {\r\n                Log.d(\"WSProSettingViewModel\", result.toString())\r\n            }\r\n\r\n            is Result.OnError -> {\r\n                Log.d(\"WSProSettingViewModel\", \"Failed\")\r\n            }\r\n        }\r\n    }\r\n\r\n    // need to call on switch change\r\n    private fun updateWSProSetting(){\r\n        disposable += getWorkspaceProData.updateWSProSetting(\r\n            id = 1, cMirrorReminder = true, cCuttingReminder = true,\r\n            cSpliceMultiplePieceReminder = true, cSpliceReminder = true\r\n        ).subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribeBy { it }\r\n    }\r\n\r\n\r\n\r\n    fun setMirrorReminderData(value:Boolean){\r\n        isMirroringReminderChecked.set(value)\r\n        postBooleanDataForSettings()\r\n    }\r\n\r\n    fun setCutNumberSplicing(value:Boolean){\r\n        isCutNumberChecked.set(value)\r\n        postBooleanDataForSettings()\r\n    }\r\n\r\n    fun setSplicingNotification(value: Boolean){\r\n        isSplicingNotificationChecked.set(value)\r\n        postBooleanDataForSettings()\r\n    }\r\n\r\n    fun setSplicingWithMultiple(value: Boolean){\r\n        isSplicingWithMultiplePieceChecked.set(value)\r\n        postBooleanDataForSettings()\r\n    }\r\n\r\n    fun postBooleanDataForSettings(){\r\n\r\n        //Making api call for settings\r\n        uiEvents.post(Event.OnShowProgress)\r\n        disposable += useCase.postSwitchData(\r\n            WSSettingsInputData(\r\n                isMirroringReminderChecked.get(),\r\n                isCutNumberChecked.get(),\r\n                isSplicingNotificationChecked.get(),\r\n                isSplicingWithMultiplePieceChecked.get(),\r\n                isClickToZoomNotification.get())\r\n        )\r\n            .subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribeBy { handleFetchResultSecond(it) }\r\n    }\r\n\r\n\r\n    private fun handleFetchResultSecond(result: Result<LoginResult>) {\r\n        uiEvents.post(Event.OnHideProgress)\r\n        when (result) {\r\n            else ->\"\"\r\n        }\r\n    }\r\n\r\n    private fun handleError(error: Error) {\r\n        when (error) {\r\n            is NoNetworkError -> activeInternetConnection.set(false)\r\n            else -> {\r\n                dbLoadError.set(true)\r\n                errorString.set(error.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Events for this view model\r\n     */\r\n    sealed class Event {\r\n        object isMirrorChecked : Event()\r\n        object isCutNumberChecked : Event()\r\n        object isSplicingNotificationChecked : Event()\r\n        object isSplicingMultipleChecked : Event()\r\n        object isZoomNotificationChecked : Event()\r\n\r\n        object OnShowProgress : Event()\r\n        object OnHideProgress : Event()\r\n        /**\r\n         * Event emitted by [events] when the data updated successfully\r\n         */\r\n        object onResponseFailed : Event()\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingViewModel.kt	(revision 4f07f1c69ae29760b345338239df0f7ce34704ab)
+++ menuitems/ui/src/main/java/com/ditto/menuitems_ui/settings/WSProSettingViewModel.kt	(date 1623243599045)
@@ -122,7 +122,7 @@
     }
 
 
-    private fun handleFetchResultSecond(result: Result<LoginResult>) {
+    private fun handleFetchResultSecond(result: Boolean) {
         uiEvents.post(Event.OnHideProgress)
         when (result) {
             else ->""
