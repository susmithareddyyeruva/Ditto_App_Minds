Index: core-lib/src/main/java/core/ui/BottomNavigationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.ui\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.text.SpannableString\r\nimport android.text.style.ForegroundColorSpan\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.EditText\r\nimport android.widget.ExpandableListView.OnChildClickListener\r\nimport android.widget.ExpandableListView.OnGroupClickListener\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.findNavController\r\nimport androidx.navigation.ui.NavigationUI.setupWithNavController\r\nimport androidx.navigation.ui.setupActionBarWithNavController\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport com.google.android.material.navigation.NavigationView\r\nimport core.appstate.AppState\r\nimport core.lib.R\r\nimport core.lib.databinding.ActivityBottomNavigationBinding\r\nimport core.lib.databinding.NavDrawerHeaderBinding\r\nimport core.ui.adapter.ExpandableMenuListAdapter\r\nimport core.ui.common.NoScrollExListView\r\nimport dagger.android.AndroidInjection\r\nimport dagger.android.AndroidInjector\r\nimport dagger.android.DispatchingAndroidInjector\r\nimport dagger.android.HasAndroidInjector\r\nimport io.reactivex.android.schedulers.AndroidSchedulers\r\nimport io.reactivex.rxkotlin.plusAssign\r\nimport javax.inject.Inject\r\n\r\n\r\n/**\r\n * Main Bottom Navigation Activity launcher class holding navHost and initial position at Splash.\r\n */\r\nclass BottomNavigationActivity : AppCompatActivity(), HasAndroidInjector,\r\n    NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    @Inject\r\n    lateinit var fragmentInjector: DispatchingAndroidInjector<Any>\r\n    private lateinit var binding: ActivityBottomNavigationBinding\r\n    private lateinit var navController: NavController\r\n    var ishidemenu: Boolean = false\r\n    lateinit var expandableListView: NoScrollExListView\r\n    lateinit var expandableListAdapter : ExpandableMenuListAdapter\r\n\r\n    @SuppressLint(\"ResourceAsColor\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        AndroidInjection.inject(this)\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_bottom_navigation)\r\n        binding.bottomNavViewModel = ViewModelProvider(this).get(BottomNavViewModel::class.java)\r\n        binding.toolbarViewModel = ViewModelProvider(this).get(ToolbarViewModel::class.java)\r\n        setSupportActionBar(binding.toolbar)\r\n        setUpNavigation()\r\n        setUpNavigationDrawer()\r\n        // temp fix for app restarting while switching apps\r\n        bindMenuHeader()\r\n        populateExpandableList()\r\n\r\n        if (!isTaskRoot\r\n            && intent.hasCategory(Intent.CATEGORY_LAUNCHER)\r\n            && intent.action != null\r\n            && intent.action.equals(Intent.ACTION_MAIN)\r\n        ) {\r\n\r\n            finish()\r\n            return\r\n        }\r\n        binding.bottomNavViewModel!!.disposable += binding.bottomNavViewModel!!.events\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe {\r\n                handleEvent(it)\r\n            }\r\n    }\r\n\r\n    private fun handleEvent(\r\n        event: BottomNavViewModel.Event?\r\n    ) {\r\n        when (event) {\r\n            is BottomNavViewModel.Event.NavigateToLogin -> {\r\n                Log.d(\"EVENT\", \"LOGOUT CLICKED\")\r\n                binding.bottomNavViewModel?.visibility?.set(false)\r\n                binding.toolbarViewModel?.isShowActionBar?.set(false)\r\n                binding.toolbarViewModel?.isShowTransparentActionBar?.set(false)\r\n                hidemenu()\r\n                navController.navigate(R.id.action_splashActivity_to_LoginFragment)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun setUpNavigation() {\r\n        val navView: BottomNavigationView = findViewById(R.id.nav_view)\r\n        navController = findNavController(R.id.nav_host_fragment)\r\n        setupActionBarWithNavController(navController)\r\n        setupWithNavController(navView, navController)\r\n    }\r\n\r\n    private fun setUpNavigationDrawer() {\r\n        binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED)\r\n        binding.navSlideView.setNavigationItemSelectedListener(this);\r\n        binding.drawerLayout.addDrawerListener(object : DrawerLayout.DrawerListener {\r\n            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {\r\n            }\r\n\r\n            override fun onDrawerOpened(drawerView: View) {\r\n                binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\r\n            }\r\n\r\n            override fun onDrawerClosed(drawerView: View) {\r\n                binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED)\r\n            }\r\n\r\n            override fun onDrawerStateChanged(newState: Int) {\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    private fun populateExpandableList() {\r\n        expandableListAdapter = ExpandableMenuListAdapter(this, binding.bottomNavViewModel!!.headerList,\r\n            binding.bottomNavViewModel!!.childList)\r\n        expandableListView =  binding.navSlideView.getHeaderView(0).findViewById(R.id.expandableListView)\r\n        expandableListView.setAdapter(expandableListAdapter)\r\n        expandableListView.setOnGroupClickListener(OnGroupClickListener { parent, v, groupPosition, id ->\r\n            if (binding.bottomNavViewModel!!.headerList.get(groupPosition).subMenu == null) {\r\n                binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n                binding.bottomNavViewModel!!.headerList.get(groupPosition).menuName?.let {\r\n                    handlemenuClick(\r\n                        it\r\n                    )\r\n                }\r\n            } else {\r\n                if (parent.isGroupExpanded(groupPosition)) {\r\n                    v?.findViewById<ImageView>(R.id.ic_menu_drop_image)\r\n                        ?.setImageResource(R.drawable.ic_menu_down)\r\n                    // Do your Staff\r\n                } else {\r\n                    v?.findViewById<ImageView>(R.id.ic_menu_drop_image)\r\n                        ?.setImageResource(R.drawable.ic_menu_up)\r\n                    // Expanded ,Do your Staff\r\n                }\r\n            }\r\n            false\r\n        })\r\n        expandableListView.setOnChildClickListener(OnChildClickListener { parent, v, groupPosition, childPosition, id ->\r\n//            if(binding.bottomNavViewModel!!.equals(this.getString(R.string.str_menu_ws_pro_settings))){\r\n//                navController.navigate(R.id.action_fragments_to_wssettings)\r\n//            }\r\n            if (binding.bottomNavViewModel!!.childList.get(binding.bottomNavViewModel!!.headerList.get(groupPosition)) != null) {\r\n                if(binding.bottomNavViewModel!!.childList.get(binding.bottomNavViewModel!!.headerList.get(groupPosition))?.get(childPosition)\r\n                        ?.menuName!!.equals(this.getString(R.string.str_menu_ws_pro_settings))){\r\n\r\n                    if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                        navController.navigate(R.id.action_homeFragment_to_wssettings_fragment)\r\n                    }\r\n                }\r\n\r\n\r\n                if ( binding.bottomNavViewModel!!.childList.get(binding.bottomNavViewModel!!.headerList.get(groupPosition))?.get(childPosition)?.menuName.equals(\"Manage Projector\")){\r\n                    navController.navigate(R.id.action_homeFragment_to_nav_graph_manage)\r\n                }\r\n\r\n                binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n            }\r\n            false\r\n        })\r\n        expandableListAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    fun refreshMenuItem() {\r\n        expandableListAdapter.notifyDataSetChanged()\r\n    }\r\n\r\n    fun bindMenuHeader() {\r\n        val viewHeader = binding.navSlideView.getHeaderView(0)\r\n        val navViewHeaderBinding: NavDrawerHeaderBinding = NavDrawerHeaderBinding.bind(viewHeader)\r\n        navViewHeaderBinding.bottomNavViewModel = binding.bottomNavViewModel\r\n    }\r\n\r\n    private fun setMenuItemColor(menu: MenuItem, color: Int) {\r\n        val spanString = SpannableString(menu.title.toString())\r\n        spanString.setSpan(ForegroundColorSpan(color), 0, spanString.length, 0)\r\n        menu.title = spanString\r\n    }\r\n      \r\n    override fun onBackPressed() {\r\n        if (binding.drawerLayout.isDrawerOpen(Gravity.RIGHT)) {\r\n            binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n            return\r\n        }\r\n        super.onBackPressed()\r\n    }\r\n      \r\n    override fun onSupportNavigateUp() = findNavController(R.id.nav_host_fragment).navigateUp()\r\n\r\n\r\n    override fun androidInjector(): AndroidInjector<Any> = fragmentInjector\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.toolbar_menu, menu)\r\n        var menuItem: MenuItem = menu!!.findItem(R.id.action_menu)\r\n        menuItem.isVisible = !ishidemenu\r\n        return true\r\n    }\r\n\r\n    fun onDrawerItemClick(item: MenuItem) {\r\n        binding.drawerLayout.openDrawer(Gravity.RIGHT)\r\n    }\r\n\r\n    /*\r\n    To hide navigation and status bars\r\n     */\r\n    override fun dispatchTouchEvent(event: MotionEvent?): Boolean {\r\n        when (event?.action) {\r\n            MotionEvent.ACTION_UP -> {\r\n                val editText = currentFocus;\r\n                if (editText is EditText) {\r\n                    val outRect = Rect()\r\n                    editText.getGlobalVisibleRect(outRect)\r\n                    if (!outRect.contains(event.rawX.toInt(), event.rawY.toInt())) {\r\n                        editText.clearFocus()\r\n                        val imm: InputMethodManager =\r\n                            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n                        imm.hideSoftInputFromWindow(editText.getWindowToken(), 0)\r\n                    }\r\n                    editText.setOnEditorActionListener(object : TextView.OnEditorActionListener {\r\n                        override fun onEditorAction(\r\n                            v: TextView?,\r\n                            actionId: Int,\r\n                            event: KeyEvent?\r\n                        ): Boolean {\r\n                            if (actionId == EditorInfo.IME_ACTION_DONE) {\r\n                                hideSystemUI()\r\n                                return false\r\n                            }\r\n                            return false\r\n                        }\r\n\r\n                    })\r\n                }\r\n                hideSystemUI()\r\n            }\r\n        }\r\n        return super.dispatchTouchEvent(event)\r\n    }\r\n\r\n    fun hidemenu() {\r\n        ishidemenu = true\r\n        invalidateOptionsMenu()\r\n    }\r\n\r\n    fun showmenu() {\r\n        ishidemenu = false\r\n        invalidateOptionsMenu()\r\n    }\r\n\r\n    fun setToolbarTitle(title: String) {\r\n        binding.toolbarViewModel?.toolbarTitle?.set(title)\r\n    }\r\n\r\n    fun setToolbarIcon() {\r\n        binding.toolbar?.setNavigationIcon(R.drawable.ic_back_button)\r\n    }\r\n\r\n    override fun onWindowFocusChanged(hasFocus: Boolean) {\r\n        super.onWindowFocusChanged(hasFocus)\r\n        if (hasFocus) {\r\n            hideSystemUI()\r\n        }\r\n    }\r\n\r\n    private fun hideSystemUI() {\r\n        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)\r\n    }\r\n\r\n    @SuppressLint(\"ResourceType\")\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        return when (item?.itemId) {\r\n            R.id.nav_graph_settings, R.id.nav_graph_software_updates -> {\r\n                binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n                false\r\n            }\r\n              R.id.nav_graph_support -> {\r\n              binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n\r\n                navController.navigate(R.id.action_fragments_to_customerCareFragment)\r\n                true\r\n            }\r\n\r\n            R.id.nav_graph_about -> {\r\n                binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n                navController.navigate(R.id.action_homeFragment_to_aboutAppFragment)\r\n                true\r\n            }\r\n            R.id.nav_graph_faq -> {\r\n                binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n                navController.navigate(R.id.action_destination_to_FQAfragment)\r\n                true\r\n            }\r\n            R.id.nav_graph_logout -> {\r\n                logoutUser(true)\r\n                true\r\n            }\r\n            R.id.nav_graph_sign_up -> {\r\n                logoutUser(false)\r\n                true\r\n            }\r\n           else -> {\r\n                false\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun logoutUser(isLogout: Boolean) {\r\n        AppState.logout()\r\n        AppState.setIsLogged(false)\r\n        binding.bottomNavViewModel?.isGuestBase?.set(true)\r\n        binding.bottomNavViewModel?.userEmailBase?.set(\"\")\r\n        binding.bottomNavViewModel?.userFirstNameBase?.set(\"\")\r\n        binding.bottomNavViewModel?.userLastNameBase?.set(\"\")\r\n        binding.bottomNavViewModel?.userPhoneBase?.set(\"\")\r\n        binding.bottomNavViewModel?.refreshMenu(this)\r\n        binding.drawerLayout.closeDrawer(Gravity.RIGHT)\r\n        if (isLogout) {\r\n            binding.bottomNavViewModel?.logout()\r\n        } else {\r\n            binding.bottomNavViewModel?.sigin()\r\n        }\r\n    }\r\n\r\n    private fun handlemenuClick (selectedmenu : String){\r\n        if (selectedmenu.equals(this.getString(R.string.str_menu_customersupport))){\r\n            if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                navController.navigate(R.id.action_fragments_to_customerCareFragment)\r\n            }\r\n        } else  if (selectedmenu.equals(this.getString(R.string.str_menu_faq))){\r\n            if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                navController.navigate(R.id.action_destination_to_FQAfragment)\r\n            }\r\n        }else  if (selectedmenu.equals(this.getString(R.string.str_menu_logout))){\r\n            if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                logoutUser(true)\r\n            }\r\n        }else  if (selectedmenu.equals(this.getString(R.string.str_menu_signin))){\r\n            if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                logoutUser(false)\r\n            }\r\n        }\r\n        else  if (selectedmenu.equals(this.getString(R.string.about_the_app_amp_policies))){\r\n            if(navController.currentDestination?.label?.equals(\"Home\")!!) {\r\n                navController.navigate(R.id.action_homeFragment_to_aboutAppFragment)\r\n            }\r\n        }\r\n        else{\r\n            Toast.makeText(this, selectedmenu, Toast.LENGTH_LONG).show()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core-lib/src/main/java/core/ui/BottomNavigationActivity.kt	(revision 35c36888315f46821200c607a9e0e099ad8c761c)
+++ core-lib/src/main/java/core/ui/BottomNavigationActivity.kt	(date 1623658989145)
@@ -138,22 +138,24 @@
         expandableListView =  binding.navSlideView.getHeaderView(0).findViewById(R.id.expandableListView)
         expandableListView.setAdapter(expandableListAdapter)
         expandableListView.setOnGroupClickListener(OnGroupClickListener { parent, v, groupPosition, id ->
-            if (binding.bottomNavViewModel!!.headerList.get(groupPosition).subMenu == null) {
-                binding.drawerLayout.closeDrawer(Gravity.RIGHT)
-                binding.bottomNavViewModel!!.headerList.get(groupPosition).menuName?.let {
-                    handlemenuClick(
-                        it
-                    )
-                }
-            } else {
-                if (parent.isGroupExpanded(groupPosition)) {
-                    v?.findViewById<ImageView>(R.id.ic_menu_drop_image)
-                        ?.setImageResource(R.drawable.ic_menu_down)
-                    // Do your Staff
-                } else {
-                    v?.findViewById<ImageView>(R.id.ic_menu_drop_image)
-                        ?.setImageResource(R.drawable.ic_menu_up)
-                    // Expanded ,Do your Staff
+            if(binding.drawerLayout.isDrawerOpen(Gravity.RIGHT)){
+                if (binding.bottomNavViewModel!!.headerList.get(groupPosition).subMenu == null) {
+                    binding.drawerLayout.closeDrawer(Gravity.RIGHT)
+                    binding.bottomNavViewModel!!.headerList.get(groupPosition).menuName?.let {
+                        handlemenuClick(
+                            it
+                        )
+                    }
+                } else {
+                    if (parent.isGroupExpanded(groupPosition)) {
+                        v?.findViewById<ImageView>(R.id.ic_menu_drop_image)
+                            ?.setImageResource(R.drawable.ic_menu_down)
+                        // Do your Staff
+                    } else {
+                        v?.findViewById<ImageView>(R.id.ic_menu_drop_image)
+                            ?.setImageResource(R.drawable.ic_menu_up)
+                        // Expanded ,Do your Staff
+                    }
                 }
             }
             false
